var Rx   = require("rx");
var util = require("util");

function RxMap(object) {
    var self = this;
    Rx.Subject.call(this);
    if (object == Object(object)) {
        this._object = Object.keys(object).reduce(function(m, n) {
            var subject = _getSubjectForKey(self, n);
            m[n] = subject;
            subject.onNext(object[n]);
            return m;
        }, {});
        this._object = object;
    } else {
        this._object = {};
    }
}

util.inherits(RxMap, Rx.Subject);

RxMap.prototype._object = undefined;

RxMap.prototype.get = function(key) {
    if (this._object[key]) {
        return this._object[key].switchLatest().take(1);
    } else {
        return Rx.Observable.empty();
    }
};

RxMap.prototype.set = function(key, value) {
    return this.setLatest(key, Rx.Observable.returnValue(value));
};

RxMap.prototype.setLatest = function(key, observableValue) {
    var self       = this;
    var subject    = _getSubjectForKey(this, key);
    var observable = subject.switchLatest().take(1);

    subject.onNext(observableValue);

    return observable;
};

RxMap.prototype.getOrElse = function(key, alternative) {
    var self = this;
    return this.get(key).any().flatMap(function(present) {
        if (present) {
            return self.get(key);
        } else {
            return alternative();
        }
    });
};

RxMap.prototype.putIfAbsent = function(key, computation) {
    var self = this;
    return this.getOrElse(key, function() {
        return computation().flatMap(function(val) {
            return self.set(key, val);
        });
    });
};

RxMap.prototype.remove = function(key) {
    delete this._object[key];
    return this;
};

var _getSubjectForKey = function(self, key) {
    if (!self._object[key]) {
        var subject       = new Rx.ReplaySubject();
        self._object[key] = subject;
        subject.switchLatest().subscribe(function(value) {
            self.onNext({key: key, value: value});
        });
    }
    return self._object[key];
};

module.exports = RxMap;
