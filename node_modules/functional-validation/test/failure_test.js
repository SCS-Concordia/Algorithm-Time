var assert     = require("assert");
var Validation = require("../index");
var Success    = require("../success");
var Failure    = require("../failure");

describe("Failure", function() {

    describe("when calling concat w/ a Success", function() {
        before(function() {
            var failure = new Failure(["error"]);
            this.result = failure.concat(new Success(1));
        });

        it("should return the failure", function() {
            assert.ok(this.result instanceof Failure);
        });
    });

    describe("when calling concat w/ a Failure", function() {
        before(function() {
            var failure = new Failure(["error1"]);
            this.result = failure.concat(new Failure(["error2"]));
        });

        it("should return the failure", function() {
            assert.ok(this.result instanceof Failure);
        });
        it("should return both Failure's merged", function() {
            assert.deepEqual(this.result._value, ["error1", "error2"]);
        });
    });

    describe("when calling a map w/ a mapper", function() {
        before(function() {
            var failure = new Failure(["error"]);
            this.result = failure.map(function(n) { return "map"; });
        });

        it("should return Failure", function() {
            assert.ok(this.result instanceof Failure);
        });
        it("should not apply the mapper", function() {
            assert.deepEqual(this.result._value, ["error"]);
        });
    });

    describe("when passing to an #ap", function() {
        before(function() {
            var v = new Failure(["error"]);
            this.result = Validation.of(function(n) { return "n"; }).ap(v);
        });

        it("should return Failure", function() {
            assert.ok(this.result instanceof Failure);
        });
        it("should not apply the operation", function() {
            assert.deepEqual(this.result._value, ["error"]);
        });
    });

    describe("when calling flatMap", function() {
        before(function() {
            var failure = new Failure(["error"]);
            this.result = failure.flatMap(function(n) {
                return new Success(1);
            });
        });

        it("should return Failure", function() {
            assert.ok(this.result instanceof Failure);
        });
        it("should not apply the operation", function() {
            assert.deepEqual(this.result._value, ["error"]);
        });
    });

    describe("when calling chain", function() {
        before(function() {
            var failure = new Failure(["error"]);
            this.result = failure.chain(function(n) {
                return new Success(1);
            });
        });

        it("should return Failure", function() {
            assert.ok(this.result instanceof Failure);
        });
        it("should not apply the operation", function() {
            assert.deepEqual(this.result._value, ["error"]);
        });
    });

    describe("when calling fold", function() {
        before(function() {
            var failure = new Failure(["error"]);
            this.result = failure.fold(
                function(_) { return true; },
                function(_) { return false; }
            );
        });

        it("should run the failure case", function() {
            assert.equal(this.result, true);
        });
    });

    describe("when calling type", function() {
        before(function() {
            var failure = new Failure(["error"]);
            this.result = failure.type();
        });

        it("should return the Failure type", function() {
            assert.equal(this.result, Validation.failure);
        });
    });

    describe("when calling toNative", function() {
        before(function() {
            var failure = new Failure(["error"]);
            this.result = failure.toNative();
        });

        it("should return the native representation", function() {
            assert.deepEqual(this.result, {
                "status":"error",
                "message":["error"]
            });
        });
    });

});
