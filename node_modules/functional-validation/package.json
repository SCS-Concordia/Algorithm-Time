{
  "_args": [
    [
      {
        "raw": "functional-validation@1.0.3",
        "scope": null,
        "escapedName": "functional-validation",
        "name": "functional-validation",
        "rawSpec": "1.0.3",
        "spec": "1.0.3",
        "type": "version"
      },
      "/Users/jacob/github/Algorithm-time/node_modules/eps"
    ]
  ],
  "_from": "functional-validation@1.0.3",
  "_id": "functional-validation@1.0.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/functional-validation",
  "_npmUser": {
    "name": "josephmoniz",
    "email": "joseph.moniz@gmail.com"
  },
  "_npmVersion": "1.3.14",
  "_phantomChildren": {},
  "_requested": {
    "raw": "functional-validation@1.0.3",
    "scope": null,
    "escapedName": "functional-validation",
    "name": "functional-validation",
    "rawSpec": "1.0.3",
    "spec": "1.0.3",
    "type": "version"
  },
  "_requiredBy": [
    "/eps",
    "/functional-form"
  ],
  "_resolved": "https://registry.npmjs.org/functional-validation/-/functional-validation-1.0.3.tgz",
  "_shasum": "bb8032326535dedacbf15de2682e94f47d86fcb9",
  "_shrinkwrap": null,
  "_spec": "functional-validation@1.0.3",
  "_where": "/Users/jacob/github/Algorithm-time/node_modules/eps",
  "author": {
    "name": "Joseph Moniz",
    "email": "joseph.moniz@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/JosephMoniz/functional-validation/issues"
  },
  "dependencies": {
    "indigenous": "1.0.*"
  },
  "description": "The validation monad",
  "devDependencies": {
    "mocha": "1.14.0"
  },
  "directories": {},
  "dist": {
    "shasum": "bb8032326535dedacbf15de2682e94f47d86fcb9",
    "tarball": "https://registry.npmjs.org/functional-validation/-/functional-validation-1.0.3.tgz"
  },
  "homepage": "https://github.com/JosephMoniz/functional-validation",
  "main": "./index.js",
  "maintainers": [
    {
      "name": "josephmoniz",
      "email": "joseph.moniz@gmail.com"
    }
  ],
  "name": "functional-validation",
  "optionalDependencies": {},
  "readme": "Functional Validation\n=====================\n\n[![Build Status](https://travis-ci.org/JosephMoniz/existence.png?branch=master)](https://travis-ci.org/JosephMoniz/existence)\n\n[Fantasy Land](https://github.com/fantasyland/fantasy-land) Compliant!\n\n[Indigenous](https://github.com/JosephMoniz/indigenous) Complaint!\n\nThis is an implementation of the Validation monad from Haskell and from the\nScalaz library. It is also naturally a functor, applictive and monoid.\n\nJust like in scalaz, theres lots of fuss about if this is a true monad and\nmonoid. The interfaces remain true but not all laws like the associativity\nlaw for monoid append hold true.\n\nExamples\n--------\n\nMonoid error concatenation:\n```javascript\nvar Success = require(\"funtional-validation/success\");\nvar Failure = require(\"funtional-validation/failure\");\n\nvar id = function(n) { return n; };\n\nvar success1 = new Success(1);\nvar success2 = new Success(2);\nvar failure1 = new Failure([\"error1\"]);\nvar failure2 = new Failure([\"error2\"]);\n\nvar combo1 = success1.concat(success2);\nconsole.log(\"Value: \" + combo1.fold(id, id));\n// prints \"Value: 1\"\n\nvar combo2 = success1.concat(error1);\nconsole.log(\"Value: \" + JSON.stringify(combo2.fold(id, id)));\n// prints \"Value: ['error1']\"\n\nvar combo3 = failure1.concat(failure2);\nconsole.log(\"Value: \" + JSON.stringify(combo2.fold(id, id)));\n//prints \"Value: ['error1', 'error2']\"\n```\n\nFunctor composition:\n```javascript\nvar Success = require(\"funtional-validation/success\");\nvar Failure = require(\"funtional-validation/failure\");\n\nvar id = function(n) { return n; };\n\nvar success = new Success(1);\nvar failure = new Failure([\"error\"]);\n\nvar map1 = success.map(function(n) { return n + 1; });\nconsole.log(\"Value: \" + map1.fold(id, id));\n//prints \"Value: 2\"\n\nvar map2 = failure.map(function(n) { return \"fail\"; });\nconsole.log(\"Value: \" + JSON.stringify(map1.fold(id, id)));\n//prints \"Value: ['error']\"\n```\n\nApplicative composition:\n```javascript\nvar Validation = require(\"funtional-validation\");\nvar Success    = require(\"funtional-validation/success\");\nvar Failure    = require(\"funtional-validation/failure\");\nvar curry      = require(\"lodash\").curry;\n\nvar id = function(n) { return n; };\n\nvar successString  = new Success(\"beep\");\nvar successNumber  = new Success(1);\nvar successBoolean = new Success(true);\n\nvar failure1 = new Failure([\"error1\"]);\nvar failure2 = new Failure([\"error2\"]);\n\nvar lifted = Validation.of(curry(function(a, b, c) {\n    return a + \" - \" + b + \" - \" + c;\n}));\n\nvar applied = lifted.ap(successString).ap(successNumber).ap(successBoolean);\nconsole.log(\"Value: \" + applied.fold(id, id));\n//prints \"Value: beep - 1 - true\"\n\nvar errored = lifted.ap(failure1).ap(successString).ap(failure2);\nconsosle.log(\"Value: \" + JSON.stringify(errored.fold(id, id)));\n//prints \"Value: ['error1', 'error2']\"\n```\n\nMonadic composition (flatMap is an alias for chain):\n```javascript\nvar Success = require(\"funtional-validation/success\");\nvar Failure = require(\"funtional-validation/failure\");\n\nvar success = new Success(1);\nvar failure = new Failure([\"error\"]);\n\nvar applied = success.flatMap(function(n) {\n    return new Success(n + 1);\n});\nconsole.log(\"Value: \" + applied.fold(id, id));\n//prints \"Value: 2\"\n\nvar ignored = failure.flatMap(function(n) {\n    return new Success(n + 1);\n});\nconsole.log(\"Value: \" + JSON.stringify(applied.fold(id, id)));\n//prints \"Value: ['error']\"\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/JosephMoniz/functional-validation.git"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha --recursive"
  },
  "version": "1.0.3"
}
