var Rx   = require("rx");
var Some = require("existence/some");
var None = require("existence/none");

/**
 * Given a handler Object or Function, normalize it to an Object
 *
 * @param Object|Function handler The action handler
 * @return Object The action handler as an object
 */
var _normalizeHandler = function(handler) {
    if (handler instanceof Function) {
        return { action: handler };
    } else {
        if (handler !== Object(handler)) {
            throw new Error(
                "request handler must either be a Function or an Object"
            );
        } else {
            return handler;
        }
    }
};

/**
 * Object getter that reruns an Existence
 *
 * @param Object obj The action object
 * @param String key The key to get
 * @return Existence The optional value
 */
var _objectGet = function(obj, key) {
    if (obj[key]) {
        return new Some(obj[key]);
    } else {
        return new None();
    }
};

/**
 * Getter for the middleware steps
 *
 * @param Object obj The action object
 * @param String key The action key
 * @return Function The resulting function
 */
var _getMiddlewareStep = function(obj, key) {
    return _objectGet(obj, key).getOrDefault(function(n) { return n; });
}

/**
 * Getter for the action step
 *
 * @param Object obj The action object
 * @param String key The action key
 * @return Function The resulting function
 */
var _getActionStep = function(obj, key) {
    return _objectGet(obj, key).getOrDefault(function(n) {
        return Rx.Observable.fromArray([n]);
    });
}

/**
 * This is the route handler builder
 *
 * @param Object handler The handler object to produce an rx-http handler for
 * @return Function A function compatible with the shape of #flatMap()
 */
module.exports = function(handler) {
    var requestHandler = _normalizeHandler(handler);
    var preAction      = _getMiddlewareStep(requestHandler, "preAction");
    var action         = _getActionStep(requestHandler, "action");
    var postAction     = _getMiddlewareStep(requestHandler, "postAction");

    return function(data) {
        return preAction(Rx.Observable.fromArray([data]))
            .map(action)
            .flatMap(postAction)
            .take(1);
    }
};
