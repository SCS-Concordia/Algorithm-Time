{
  "_args": [
    [
      {
        "raw": "eps@^0.1.0",
        "scope": null,
        "escapedName": "eps",
        "name": "eps",
        "rawSpec": "^0.1.0",
        "spec": ">=0.1.0 <0.2.0",
        "type": "range"
      },
      "/Users/jacob/github/Algorithm-time"
    ]
  ],
  "_from": "eps@>=0.1.0 <0.2.0",
  "_id": "eps@0.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/eps",
  "_npmUser": {
    "name": "josephmoniz",
    "email": "joseph.moniz@gmail.com"
  },
  "_npmVersion": "1.3.14",
  "_phantomChildren": {
    "character-parser": "1.2.0",
    "commander": "2.0.0",
    "constantinople": "1.0.2",
    "mkdirp": "0.3.5",
    "monocle": "1.1.50",
    "transformers": "2.1.0",
    "with": "1.1.1"
  },
  "_requested": {
    "raw": "eps@^0.1.0",
    "scope": null,
    "escapedName": "eps",
    "name": "eps",
    "rawSpec": "^0.1.0",
    "spec": ">=0.1.0 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/eps/-/eps-0.1.0.tgz",
  "_shasum": "96d615c92ca5e058c00480cc9384b7ddb27611ef",
  "_shrinkwrap": null,
  "_spec": "eps@^0.1.0",
  "_where": "/Users/jacob/github/Algorithm-time",
  "author": {
    "name": "Joseph Moniz",
    "email": "joseph.moniz@gmail.com"
  },
  "dependencies": {
    "color-terminal": "0.0.3-4",
    "cookie": "0.1.0",
    "cookie-signature": "1.0.1",
    "existence": "1.0.3",
    "filed": "0.1.0",
    "functional-form": "0.1.2",
    "functional-validation": "1.0.3",
    "header": "0.1.1",
    "indigenous": "1.0.0",
    "jade": "0.35.0",
    "less": "1.5.0",
    "lodash": "2.2.1",
    "lver-cmp": "0.1.1",
    "responses": "0.1.0",
    "rx": "2.2.9",
    "rx-config": "0.1.0",
    "rx-directory": "0.1.2",
    "rx-http-server": "0.1.1",
    "rx-map": "0.1.1",
    "rx-request-handler": "0.1.4",
    "rx-router": "0.2.2",
    "rx-service-manager": "0.1.0"
  },
  "description": "The EPS framework",
  "devDependencies": {
    "mocha": "1.9.0"
  },
  "directories": {},
  "dist": {
    "shasum": "96d615c92ca5e058c00480cc9384b7ddb27611ef",
    "tarball": "https://registry.npmjs.org/eps/-/eps-0.1.0.tgz"
  },
  "main": "./src/main.js",
  "maintainers": [
    {
      "name": "josephmoniz",
      "email": "joseph.moniz@gmail.com"
    }
  ],
  "name": "eps",
  "optionalDependencies": {},
  "readme": "EPS Web Framework\n=================\n\nAn oppinionated reactive server side web framework for node.js based off of\nRxJS.\n\nInstall\n-------\n\nClone the repo to a destination of your choice:\n```\ngit clone git@github.com:WarpcoreLabs/eps.git\n```\n\nInstall the dependencies:\n```\nnpm install\n```\n\nFire the bass cannon:\n```\nnpm start\n```\n\nPick up your loot at [http://localhost:3000](http://localhost:3000)\n\nThe basics\n----------\n\nEPS is part framework part lego kit. It gives you lots of powerful components\nto snap together and you can choose to create or replace whatever components\nyou see fit.\n\nA basic setup starts with a master process spawning, monitoring and reviving\nworker processes. The worker processes spin up HTTP servers and compose\na set of request handling components together known as `root middleware`.\nAt the end of the `root middleware` composition there is a responseConsumer\nsubscribed too it that takes responses and sends them to the client.\n\nThis basic setup typically lives in your src/main.js file and will look\nsomething like the following:\n```javascript\nvar cluster             = require(\"cluster\");\nvar os                  = require(\"os\");\nvar RxHttpServer        = require(\"rx-http-server\");\nvar requestLogger       = require(\"./middleware/root/request-logger\");\nvar less                = require(\"./middleware/root/less\");\nvar staticFiles         = require(\"./middleware/root/static-files\");\nvar services            = require(\"./middleware/root/services\");\nvar cookieReader        = require(\"./middleware/root/cookie/reader\");\nvar cookieWriter        = require(\"./middleware/root/cookie/writer\");\nvar flashSessionReader  = require(\"./middleware/root/flash-session/reader\");\nvar flashSessionWriter  = require(\"./middleware/root/flash-session/writer\");\nvar signedSessionReader = require(\"./middleware/root/signed-session/reader\");\nvar signedSessionWriter = require(\"./middleware/root/signed-session/writer\");\nvar router              = require(\"./middleware/root/router\");\n\nvar cpus       = os.cpus().length;\nvar server     = new RxHttpServer();\nvar lessPath   = path.join(__dirname, \"public/css/main.less\");\nvar publicPath = path.join(__dirname, \"public\");\n\nif (cluster.isMaster) {\n    for (var i = 0; i < cpus; i++) {\n        cluster.fork();\n    }\n    cluster.on(\"exit\", function(worker, code, signal) {\n        logger.error(new WorkerDiedAction(worker));\n        cluster.fork();\n    });\n} else {\n    server\n        .requests\n        .flatMap(services)\n        .flatMap(requestLogger)\n        .flatMap(less(\"/public/css/main.css\", lessPath))\n        .flatMap(staticFiles(\"/public\", publicPath))\n        .flatMap(cookieReader)\n        .flatMap(flashSessionReader)\n        .flatMap(signedSessionReader(\"Why is a raven like a writing desk?\"))\n        .flatMap(router)\n        .flatMap(signedSessionWriter(\"Why is a raven like a writing desk?\"))\n        .flatMap(flashSessionWriter)\n        .flatMap(cookieWriter)\n        .subscribe(responseConsumer);\n    server.listen(3000);\n}\n```\n\nLikewise, each controller is a composition of components. The actual controller\n`action` is preceded by an optional and custom `preAction` pipeline and followed\nby another optional and custom `postAction` pipeline.\n\nA simple example that makes sure a user is unauthenticated and grabs the\ntemplate service in the `preAction` pipeline and does etag cache checking\nin the `postAction` pipeline would look something like this:\n```javascript\nvar Rx              = require(\"rx\");\nvar handler         = require(\"rx-request-handler\");\nvar OkResponse      = require(\"responses/response/ok\");\nvar response        = require(\"../util/response\");\nvar unauthenticated = require(\"../middleware/controller/pre/unauthenticated\");\nvar requireService  = require(\"../middleware/controller/pre/require-service\");\nvar etagHit         = require(\"../middleware/controller/post/etag-hit\");\nvar etagResponse    = require(\"../middleware/controller/post/etag-response\");\n\nmodule.exports = handler({\n\n    preAction: function(observable) {\n        return observable\n            .flatMap(unauthenticated)\n            .flatMap(requireService(\"templates\"));\n    },\n\n    action: function(data) {\n        return response(OkResponse, data, function() {\n            return data.services.templates(\"index.jade\");\n        });\n    },\n\n    postAction: function(observables) {\n        return observables\n            .flatMap(etagHit)\n            .flatMap(etagResponse);\n    }\n\n});\n```\n",
  "readmeFilename": "README.md",
  "scripts": {
    "start": "node ./src/main.js",
    "test": "./node_modules/.bin/mocha --recursive"
  },
  "version": "0.1.0"
}
