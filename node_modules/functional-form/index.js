var Some        = require("existence/some");
var None        = require("existence/none");
var Success     = require("functional-validation/success");
var isUndefined = require("lodash").isUndefined;
var values      = require("lodash").values;
var extend      = require("lodash").extend;
var clone       = require("lodash").clone;
var obj         = require("./obj");

function Form(data, errors) {
    this._definition = this.definition();
    this._data       = data || {};
    this._errors     = errors || {};
}

Form.prototype._definition = undefined;
Form.prototype._data       = undefined;
Form.prototype._errors     = undefined;

Form.prototype.definition = function() {
    throw new Error("Instance of Form must define #definition()");
};

Form.prototype.validate = function(form) {
    var self = this;
    return new this.constructor(
        form,
        Object.keys(this._definition).reduce(function(errors, key) {
            var result = self._definition[key].reduce(function(status, rule) {
                return status.flatMap(function(value) {
                    return rule.validate(value);
                });
            }, new Success(form[key]));

            return result.fold(
                function(e) { return extend(errors, obj(key, e)); },
                function(_) { return errors; }
            );
        }, {})
    );
};

Form.prototype.hasErrors = function() {
    return Object.keys(this._errors).length > 0;
};

Form.prototype.getError = function(key) {
    if (isUndefined(this._errors[key])) {
        return new None();
    } else {
        return new Some(this._errors[key]);
    }
};

Form.prototype.getErrors = function() {
    return values(this._errors);
};

Form.prototype.withError = function(key, message) {
    return this.withErrors(obj(key, message));
};

Form.prototype.withErrors = function(errors) {
    return new this.constructor(
        this._data,
        extend(clone(this._errors), errors)
    );
};

Form.prototype.getValue = function(key) {
    if (isUndefined(this._data[key])) {
        return new None();
    } else {
        return new Some(this._data[key]);
    }
};

Form.prototype.getValues = function() {
    return this._data;
};

Form.prototype.fillValue = function(key, value) {
    this.fill(obj(key, value));
};

Form.prototype.fill = function(values) {
    return new this.constructor(
        extend(clone(this._data), values),
        this._errors
    );
};

Form.prototype.fold = function(failure, success) {
    if (this.hasErrors()) {
        return failure(this);
    } else {
        return success(this);
    }
};

Form.prototype.flatMap = function(flatMapper) {
    if (this.hasErrors()) {
        return this;
    } else {
        var flatMapped = flatMapper(this.getValues());
        if (flatMapped instanceof Form) {
            return flatMapped;
        } else {
            throw new Error("flatMap must return an instance of Form");
        }
    }
};

Form.prototype.map = function(mapper) {
    if (this.hasErrors()) {
        return this;
    } else {
        return new this.constructor(mapper(this.getValues()), {});
    }
};

module.exports = Form;
