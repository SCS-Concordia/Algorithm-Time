var util       = require("util");
var indigenous = require("indigenous");

function Existence() {
    //
}

Existence.prototype.concat = function(other) {
    throw new Error("Must implement #concat() if you extend Existence");
};

Existence.empty = function() {
    return new Existence();
};

Existence.prototype.map = function(mapper) {
    throw new Error("Must implement #map() if you extend Existence");
};

Existence.prototype.ap = function(next) {
    throw new Error("Must implement #ap() if you extend Existence");
};

Existence.of = function(fn) {
    return new Some(fn);
};

Existence.prototype.flatMap = function(flatMapper) {
    throw new Error("Must implement #flatMap() if you extend Existence");
};

Existence.prototype.chain = Existence.prototype.flatMap;

Existence.prototype.getOrDefault = function(alternative) {
    throw new Error("Must implement #getOrDefault() if you extend Existence");
};

Existence.prototype.getOrElse = function(alternative) {
    throw new Error("Must implement #getOrElse() if you extend Existence");
};

Existence.prototype.orElse = function(alternative) {
    throw new Error("Must implement #orElse() if you extend Existence");
};

Existence.prototype.fold = function(missing, exists) {
    throw new Error("Must implement #fold() if you extend Existence");
};

Existence.prototype.exists = function() {
    throw new Error("Must implement #exists() if you extend Existence");
};

Existence.prototype.toNative = function() {
    throw new Error("Must implement #toNative() if you extend Existence");
};


function Some(value) {
    Existence.call(this);
    this._value = value;
}

util.inherits(Some, Existence);

Some.prototype._value = undefined;

Some.prototype.concat = function(other) {
    var self  = this;
    var added = other.map(function(n) { return self._value.concat(n); });
    return added.orElse(function() { return self; });
};

Some.prototype.map = function(mapper) {
    return new Some(mapper(this._value));
};

Some.prototype.ap = function(next) {
    return next.map(this._value);
};

Some.prototype.flatMap = function(flatMapper) {
    return flatMapper(this._value);
};

Some.prototype.chain = Some.prototype.flatMap;

Some.prototype.getOrDefault = function(alternative) {
    return this._value;
};

Some.prototype.getOrElse = function(alternative) {
    return this._value;
};

Some.prototype.orElse = function(alternative) {
    return this;
};

Some.prototype.fold = function(missing, exists) {
    return exists();
};

Some.prototype.exists = function() {
    return true;
};

Some.prototype.toNative = function() {
    return indigenous(this._value);
};


function None() {
    Existence.call(this);
}

util.inherits(None, Existence);

None.prototype.concat = function(other) {
    return other;
};

None.prototype.map = function(mapper) {
    return this;
};

None.prototype.ap = function(next) {
    return this;
};

None.prototype.flatMap = function(flatMapper) {
    return this;
};

None.prototype.chain = None.prototype.flatMap;

None.prototype.getOrDefault = function(alternative) {
    return alternative;
};

None.prototype.getOrElse = function(alternative) {
    return alternative();
};

None.prototype.orElse = function(alternative) {
    return alternative();
};

None.prototype.fold = function(missing, exists) {
    return missing();
};

None.prototype.exists = function() {
    return false;
};

None.prototype.toNative = function() {
    return null;
};


Existence.Some = Some;

Existence.None = None;


module.exports = Existence;
