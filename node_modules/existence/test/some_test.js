var assert    = require("assert");
var Existence = require("../index");
var Some      = require("../some");
var None      = require("../none");

describe("Some", function() {

    describe("when calling concat w/ a Some", function() {
        before(function() {
            var some    = new Some([1]);
            var other   = new Some([2]);
            this.result = some.concat(other);
        });

        it("should return an instance of Some", function() {
            assert.ok(this.result instanceof Some);
        });
        it("should contain the merged list", function() {
            assert.deepEqual(this.result._value, [1, 2]);
        });
    });

    describe("when calling concat w/ a None", function() {
        before(function() {
            var some    = new Some([1]);
            var other   = new None();
            this.result = some.concat(other);
        });

        it("should return an instance of Some", function() {
            assert.ok(this.result instanceof Some);
        });
        it("should contain the original list", function() {
            assert.deepEqual(this.result._value, [1]);
        });
    });

    describe("when calling map w/ a mapper", function() {
        before(function() {
            var some    = new Some(1);
            this.result = some.map(function(n) { return n + 1; });
        });

        it("should return an instance of Some", function() {
            assert.ok(this.result instanceof Some);
        });
        it("should contain the incremented number", function() {
            assert.equal(this.result._value, 2);
        });
    });

    describe("when passing to an #ap()", function() {
        before(function() {
            var some    = new Some(1);
            this.result = Existence.of(function(n) { return n + 1 }).ap(some);
        });

        it("should return an instance of Some", function() {
            assert.ok(this.result instanceof Some);
        });
        it("should contain the incremented number", function() {
            assert.equal(this.result._value, 2);
        });
    });

    describe("when returning a Some from flatMap", function() {
        before(function() {
            var some    = new Some(1);
            this.result = some.flatMap(function(n) {
                return new Some(n + 1);
            });
        });

        it("should return an instance of Some", function() {
            assert.ok(this.result instanceof Some);
        });
        it("should contain the incremented number", function() {
            assert.equal(this.result._value, 2);
        });
    });

    describe("when returning a None from flatMap", function() {
        before(function() {
            var some    = new Some(1);
            this.result = some.flatMap(function(n) {
                return new None();
            });
        });

        it("should return an instance of None", function() {
            assert.ok(this.result instanceof None);
        });
    });

    describe("when returning a Some from chain", function() {
        before(function() {
            var some    = new Some(1);
            this.result = some.chain(function(n) {
                return new Some(n + 1);
            });
        });

        it("should return an instance of Some", function() {
            assert.ok(this.result instanceof Some);
        });
        it("should contain the incremented number", function() {
            assert.equal(this.result._value, 2);
        });
    });

    describe("when returning a None from chain", function() {
        before(function() {
            var some    = new Some(1);
            this.result = some.chain(function(n) {
                return new None();
            });
        });

        it("should return an instance of None", function() {
            assert.ok(this.result instanceof None);
        });
    });

    describe("when calling getOrDefault", function() {
        before(function() {
            var some    = new Some(1);
            this.result = some.getOrDefault(2);
        });

        it("should contain the number 1", function() {
            assert.equal(this.result, 1);
        });
    });

    describe("when calling getOrElse", function() {
        before(function() {
            var some    = new Some(1);
            this.result = some.getOrElse(function() { return 2; });
        });

        it("should contain the number 1", function() {
            assert.equal(this.result, 1);
        });
    });

    describe("when calling orElse", function() {
        before(function() {
            var some    = new Some(1);
            this.result = some.orElse(function() { return new Some(2); });
        });

        it("should return an instance of Some", function() {
            assert.ok(this.result instanceof Some);
        });
        it("should contain the number 1", function() {
            assert.equal(this.result._value, 1);
        });
    });

    describe("when calling fold", function() {
        before(function() {
            var some    = new Some(1);
            this.result = some.fold(
                function() { return false; },
                function() { return true; }
            );
        });

        it("should return true", function() {
            assert.equal(this.result, true);
        });
    });

    describe("when calling exists", function() {
        before(function() {
            var some     = new Some(1);
            this.results = some.exists();
        });

        it("should return true", function() {
            assert.equal(this.result, true);
        });
    });

    describe("when converting a primitive to native", function() {
        before(function() {
            var some     = new Some(42);
            this.results = some.toNative()
        });

        it("should return the value", function() {
            assert.equal(this.results, 42);
        });
    });

    describe("when converting a nested to native", function() {
        before(function() {
            var some     = new Some(new Some(42));
            this.results = some.toNative()
        });

        it("should return the value", function() {
            assert.equal(this.results, 42);
        });
    });

});
