var assert    = require("assert");
var Existence = require("../index");
var Some      = require("../some");
var None      = require("../none");

describe("None", function() {

    describe("when calling concat w/ a Some", function() {
        before(function() {
            var none    = new None();
            var other   = new Some([2]);
            this.result = none.concat(other);
        });

        it("should return an instance of Some", function() {
            assert.ok(this.result instanceof Some);
        });
        it("should contain the original list", function() {
            assert.deepEqual(this.result._value, [2]);
        });
    });

    describe("when calling concat w/ a None", function() {
        before(function() {
            var none    = new None();
            var other   = new None();
            this.result = none.concat(other);
        });

        it("should return an instance of None", function() {
            assert.ok(this.result instanceof None);
        });
    });

    describe("when calling map w/ a mapper", function() {
        before(function() {
            var none    = new None();
            this.result = none.map(function(n) { return n + 1; });
        });

        it("should return an instance of None", function() {
            assert.ok(this.result instanceof None);
        });
    });

    describe("when passing to an #ap()", function() {
        before(function() {
            var none    = new None();
            this.result = Existence.of(function(n) { return n + 1 }).ap(none);
        });

        it("should return an instance of None", function() {
            assert.ok(this.result instanceof None);
        });
    });

    describe("when calling flatMap", function() {
        before(function() {
            var none    = new None();
            this.result = none.flatMap(function(n) {
                return new Some(n + 1);
            });
        });

        it("should return an instance of None", function() {
            assert.ok(this.result instanceof None);
        });
    });

    describe("when calling chain", function() {
        before(function() {
            var none    = new None();
            this.result = none.chain(function(n) {
                return new Some(n + 1);
            });
        });

        it("should return an instance of None", function() {
            assert.ok(this.result instanceof None);
        });
    });

    describe("when calling getOrDefault", function() {
        before(function() {
            var none    = new None();
            this.result = none.getOrDefault(2);
        });

        it("should return 2", function() {
            assert.equal(this.result, 2);
        });
    });

    describe("when calling getOrElse", function() {
        before(function() {
            var none    = new None();
            this.result = none.getOrElse(function() { return 2; });
        });

        it("should return 2", function() {
            assert.equal(this.result, 2);
        });
    });

    describe("when calling orElse", function() {
        before(function() {
            var none    = new None();
            this.result = none.orElse(function() { return new Some(2); });
        });

        it("should return an instance of Some", function() {
            assert.ok(this.result instanceof Some);
        });
        it("should wrap the value 2", function() {
            assert.equal(this.result._value, 2);
        });
    });

    describe("when calling fold", function() {
        before(function() {
            var none    = new None();
            this.result = none.fold(
                function() { return true; },
                function() { return false; }
            );
        });

        it("should return true", function() {
            assert.equal(this.result, true);
        });
    });

    describe("when calling exists", function() {
        before(function() {
            var none    = new None();
            this.result = none.exists();
        });

        it("should return false", function() {
            assert.equal(this.result, false);
        });
    });

    describe("when converting to native", function() {
        before(function() {
            var none    = new None();
            this.result = none.toNative();
        });

        it("should return null", function() {
            assert.equal(this.result, null);
        });
    });

});
