var ResponseHeader = require("header/response");

function Response(request, response, view) {
    this._request  = request;
    this._response = response;
    this._view     = view;
    this._headers  = {};
}

Response.prototype._view     = undefined;
Response.prototype._headers  = undefined;
Response.prototype._request  = undefined;
Response.prototype._response = undefined;

Response.prototype.statusCode = function() {
    throw new Error("Response types must implement #statusCode()");
};

Response.prototype.withHeader = function(header) {
    if (header instanceof ResponseHeader) {
        var key
        if (this._headers[header.getKey()]) {
            this._headers[header.getKey()].push(header.getValue());
        } else {
            this._headers[header.getKey()] = [header.getValue()];
        }
        return this;
    } else {
        throw new Error(
            "Response#withHeader() must recieve a ResponseHeader object"
        );
    }
};

Response.prototype.withHeaders = function(headers) {
    return headers.reduce(function(response, header) {
        return response.withHeader(header);
    }, this);
};

Response.prototype.getHeaders = function() {
    return this._headers;
};

Response.prototype.getView = function() {
    return this._view;
};

Response.prototype.getResponse = function() {
    return this._response;
};

Response.prototype.getRequest = function() {
    return this._request;
}

module.exports = Response;
